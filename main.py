from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ConversationHandler
from datetime import datetime
from g4f.client import Client
import g4f
import nest_asyncio
nest_asyncio.apply()
# g4f.disable_ssl_verification() 
# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '7495078009:AAG9m37Qhx5rfC98RLuHLRcBq_IuBc_Ks1Q'
ASK_FOR_PROMPT = range(1)
client = Client()
schedules = {
    'this_week': {
        'url': 'https://imgur.com/a/Zw4O1Hw',
    },
    'next_week': {
        'url': 'https://imgur.com/a/PkSZfkc',
    },
    # –î–æ–¥–∞–π —ñ–Ω—à—ñ —Ç–∏–∂–Ω—ñ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ–Ω—é
def create_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üóì –ü–æ—Ç–æ—á–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥", callback_data='this_week')],
        [InlineKeyboardButton("üóì –ù–∞—Å—Ç—É–ø–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å", callback_data='next_week')]
    ])

# –§—É–Ω–∫—Ü—ñ—è —Å—Ç–∞—Ä—Ç—É
async def start(update: Update, context):
    user = update.message.from_user  # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    username = user.username
    await update.message.reply_text(
        text="–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π –Ω–∏–∂—á–µ:",  # Add a welcome message
        reply_markup=create_menu()
    )

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥—É
async def get_schedule(update: Update, context):
    photo_url = schedules['this_week']['url']
    await update.message.reply_photo(photo=photo_url, reply_markup=create_menu())

async def get_comingweek(update: Update, context):
    photo_url = schedules['next_week']['url']
    await update.message.reply_photo(photo=photo_url, reply_markup=create_menu())

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–Ω–µ–∫–¥–æ—Ç–∞
async def send_anekdot(update: Update, context):
    query = update.callback_query
    user = query.from_user  # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    username = user.username
    await query.answer()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∞–Ω–µ–∫–¥–æ—Ç —á–µ—Ä–µ–∑ GPT API
    response = client.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": "–ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –∂–∞—Ä—Ç –∞–±–æ –∞–Ω–µ–∫–¥–æ—Ç, –≤–∫–ª—é—á–∞—é—á–∏ –æ–¥–Ω–æ–≥–æ –∞–±–æ –∫—ñ–ª—å–∫–æ—Ö –∑ —Ç–∞–∫–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤ –Ω–µ –æ–±–æ–≤ º—è–∑–∫–æ–≤–æ –≤—Å—ñ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤ —É –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤ —î –æ–ø–∏—Å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –π–æ–≥–æ –¥–ª—è –∞–Ω–µ–∫–¥–æ—Ç—ñ–≤: –î–∞–Ω—è, –í—ñ–∫–∞(—è–∫–∞ –∑–∞–∫–æ—Ö–∞–Ω–∞ –≤ –ù—ñ–∫—ñ—Ç—É, –≤–æ–Ω–∞ –ø—Å–∏—Ö–æ–ª–æ–≥, –æ–±–æ–∂–Ω—é—î –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ —Ç–∞–∫ —Å–µ –±–æ–Ω, —Å–µ –±—å—è–Ω, —Å–µ –¥—Ä–æ–ª—å –±–æ –≤–æ–Ω–∞ –≤—á–∏—Ç—å —Ñ—Ä–∞–Ω—Ü—É–∑—å–∫—É), –î—ñ–º–∞(–≤—ñ–Ω –¥—É–∂–µ —Å–∞—Ç–∏—Ä–∏—á–Ω–∏–π 17 —Ä—ñ—á–Ω–∏–π —Ö–ª–æ–ø—á–∏–∫), –ù—ñ–∫—ñ—Ç–∞(–í—ñ–Ω –≥–µ–π,—è–∫–∏–π –Ω–µ —Ö–æ–¥–∏—Ç—å –Ω–∞ –Ω–∞–≤—á–∞–Ω–Ω—è, –ø–æ—Å—Ç—ñ–π–Ω–æ —à—É–∫–∞—î –≤—ñ–¥–º–∞–∑–∫–∏), –ù–µ—Å—Ç–æ—Ä(–≤—ñ–Ω –¥—É–∂–µ —Å–ø–æ–∫—ñ–π–Ω–∏–π –∑–∞–≤–∂–¥–∏), —ñ –ê–Ω–∞–Ω–∞—Å(–π–æ–≥–æ –∑–≤–∞—Ç–∏ –ê–Ω–∞—Å, –≤—ñ–Ω –∞—Ä–∞–± —ñ —Å–ø—ñ–ª–∫—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –∞—Ä–∞–±—Å—å–∫–æ—é –∞–±–æ —Ñ—Ä–∞–Ω—Ü—É–∑—å—Å–∫–æ—é –º–æ–≤–æ—é). –ñ–∞—Ä—Ç –º–∞—î –±—É—Ç–∏ –≤–µ—Å–µ–ª–∏–º —ñ –∫—Ä–µ–∞—Ç–∏–≤–Ω–∏–º, –∞–ª–µ –Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –≤—Å—ñ –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –≤ –∫–æ–∂–Ω–æ–º—É –∂–∞—Ä—Ç—ñ, —Å—Ç–µ–∂ –∑–∞ —Ç–∏–º —â–æ–± –∞–Ω–µ–∫–¥–æ—Ç –±—É–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π —ñ —Å–º—ñ—à–Ω–∏–π."}],
    )
   # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤—ñ–¥–ø–æ–≤—ñ–¥—å —ñ —á–∏ –º—ñ—Å—Ç–∏—Ç—å –≤–æ–Ω–∞ –¥–∞–Ω—ñ
    anekdot = response.choices[0].message.content 
    await query.message.reply_text(f"–ê–Ω–µ–∫–¥–æ—Ç –¥–ª—è {username}:\n{anekdot}", reply_markup=create_menu())

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–Ω–µ–∫–¥–æ—Ç–∞
async def send_fanfik(update: Update, context):
    query = update.callback_query
    user = query.from_user  # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    username = user.username
    await query.answer()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∞–Ω–µ–∫–¥–æ—Ç —á–µ—Ä–µ–∑ GPT API
    response = client.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": "–ù—ñ–∫—ñ—Ç–∞ –∑–∞—Ö–≤–æ—Ä—ñ–≤ –Ω–∞ —Ä–∞–∫ –∞–Ω—É—Å–∞, –Ω–∞–ø–∏—à–∏ –π–æ–º—É –ø—Ä–∏—î–º–Ω–∏—Ö —Å–ª—ñ–≤ —â–æ–± –≤—ñ–Ω –æ–¥—É–∂–∞–≤ —ñ –ø–æ–±–∞–∂–∞–π —á–æ–≥–æ—Å—å –≤—ñ–¥ –ª–∏—Ü—è –∞–Ω—ñ–º–µ—à–Ω—ñ—Ü–∏."}],
    )
   # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤—ñ–¥–ø–æ–≤—ñ–¥—å —ñ —á–∏ –º—ñ—Å—Ç–∏—Ç—å –≤–æ–Ω–∞ –¥–∞–Ω—ñ
    fanfik = response.choices[0].message.content 
    await query.message.reply_text(f"–§–∞–Ω—Ñ—ñ–∫ –¥–ª—è @AkameGaNick :\n{fanfik}", reply_markup=create_menu())

async def send_polska(update: Update, context):
    query = update.callback_query
    user = query.from_user  # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    username = user.username
    await query.answer()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∞–Ω–µ–∫–¥–æ—Ç —á–µ—Ä–µ–∑ GPT API
    response = client.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": "Napisz Nestorowi co≈õ mi≈Çego po polsku."}],
    )
   # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤—ñ–¥–ø–æ–≤—ñ–¥—å —ñ —á–∏ –º—ñ—Å—Ç–∏—Ç—å –≤–æ–Ω–∞ –¥–∞–Ω—ñ
    polska = response.choices[0].message.content 
    await query.message.reply_text(f"—Ü–∏—Ç–∞—Ç–∞ –¥–ª—è @h3llacious :\n{polska}", reply_markup=create_menu())
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∞–Ω–µ–∫–¥–æ—Ç"
async def customize_anekdot(update: Update, context):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –∑–∞–ø–∏—Ç –¥–ª—è –∞–Ω–µ–∫–¥–æ—Ç–∞:")
    
    return ASK_FOR_PROMPT 

# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –ø—Ä–æ–º–ø—Ç—É
async def receive_prompt(update: Update, context):
    user = update.message.from_user
    prompt = update.message.text
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–≤–µ–¥–µ–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–Ω–µ–∫–¥–æ—Ç–∞
    response = client.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}],
    )
    
    anekdot = response.choices[0].message.content
    await update.message.reply_text(f"–í–∞—à –∞–Ω–µ–∫–¥–æ—Ç:\n{anekdot}", reply_markup=create_menu())
    
    return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à—É—î–º–æ –¥—ñ–∞–ª–æ–≥
# –§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ä–æ–∑–∫–ª–∞–¥—É
async def send_schedule(update: Update, context):
    query = update.callback_query
    user = query.from_user  # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    username = user.username
    await query.answer()

    if query.data == 'this_week':
        photo_url = schedules['this_week']['url']
        await query.message.reply_photo(photo=photo_url, reply_markup=create_menu())

    elif query.data == 'next_week':
        photo_url = schedules['next_week']['url']
        await query.message.reply_photo(photo=photo_url, reply_markup=create_menu())

    elif query.data == 'start':
        await start(update=query, context=context)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ query.message

# –û—Å–Ω–æ–≤–Ω–∏–π –±–ª–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–∏
if __name__ == '__main__':
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CallbackQueryHandler(send_schedule))
    application.add_handler(CommandHandler('get_schedule', get_schedule))
    application.add_handler(CommandHandler('get_comingweek', get_comingweek))
    # application.add_handler(CommandHandler('send_anekdot',send_anekdot))
    # application.add_handler(CommandHandler('send_fanfik',send_fanfik))
     # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–Ω–µ–∫–¥–æ—Ç–∞ —á–µ—Ä–µ–∑ –≤–≤–µ–¥–µ–Ω–∏–π –ø—Ä–æ–º–ø—Ç
    # conv_handler = ConversationHandler(
    # entry_points=[CommandHandler('start', start)],
    # states={
    #     CHOOSING: [
    #         MessageHandler(Filters.text & ~Filters.command, choice),
    #         CallbackQueryHandler(choice_callback)
    #     ],
    # },
    # fallbacks=[CommandHandler('cancel', cancel)],
    # per_message=True 
    # )



    # application.add_handler(conv_handler)
    application.run_polling()
